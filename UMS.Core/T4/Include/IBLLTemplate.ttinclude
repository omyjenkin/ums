<#+


public class IBLLTemplate : CSharpTemplate
{
    private T4ModelInfo _model;
        
    public IBLLTemplate(T4ModelInfo model)
    {
        _model = model;
    }

    /// <summary>
    /// 获取 生成的文件名，根据模型名定义
    /// </summary>
    public string FileName
    {
        get
        { 
            return string.Format("I{0}Service.generated.cs", _model.Name);
        }
    }

	public override string TransformText()
	{
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
//	   如存在本生成代码外的新需求，请在相同命名空间下创建同名分部类进行实现。
// </auto-generated>
//

//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;

using UMS.Models<#= _model.UseModuleDir ? "." + _model.ModuleName : "" #>;


namespace UMS.Core<#= _model.UseModuleDir ? "." + _model.ModuleName : "" #>
{
	/// <summary>
    ///   业务层接口——<#= _model.Description #>
    /// </summary>
    public partial interface I<#= _model.Name #>Service 
    { 
		IQueryable<<#=_model.Name #>> List();
		IQueryable<<#=_model.Name #>> List(ref GridPager pager,Expression<Func<<#=_model.Name #>, bool>> propertyExpression);
		int Insert(<#=_model.Name #> entity, bool isSave = true);
		int Insert(IEnumerable<<#=_model.Name #>> entities, bool isSave = true);
		int Delete(<#=_model.KeyTypeName #> id, bool isSave = true);
		int Delete(<#=_model.Name #> entity, bool isSave = true);
		int Delete(IEnumerable<<#=_model.Name #>> entities, bool isSave = true);
		int Delete(Expression<Func<<#=_model.Name #>, bool>> predicate, bool isSave = true);
		int Update(<#=_model.Name #> entity, bool isSave = true);
		int Update(Expression<Func<<#=_model.Name #>, object>> propertyExpression, <#=_model.Name #> entity, bool isSave = true);
		<#=_model.Name #> GetByKey(<#=_model.KeyTypeName #> key);
       
	}
}
<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>